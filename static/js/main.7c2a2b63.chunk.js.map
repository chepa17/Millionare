{"version":3,"sources":["components/ui/button/button.tsx","components/startPage/startPage.tsx","components/gameOverPage/containerOver.tsx","components/gameOverPage/gameOverPage.tsx","components/gamePage/prizes/prizesItem/prizesItem.tsx","components/gamePage/prizes/prizes.tsx","components/gamePage/option/option.tsx","components/gamePage/question/question.tsx","components/gamePage/containerGame.tsx","components/gamePage/gamePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","useState","pressed","setPressed","className","classNames","onClick","children","StartPage","history","useHistory","src","alt","push","ContainerOver","connect","state","round","dispatch","restartGame","type","onRestartGame","useCallback","prize","config","prizes","console","log","PrizesItem","currentQuestion","index","Prizes","reverse","map","item","length","key","Option","option","selected","status","handleOnClick","id","leter","Question","question","onAnswer","setSelected","setStatus","handleOnAnswer","arg","useEffect","timer","secondTimer","setTimeout","answer","answers","find","includes","clearTimeout","options","ContainerGame","onNextRound","handleOnNextRound","showQuestion","setShowQuestion","questions","toString","result","store","createStore","action","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c2a2b63.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport './button.css';\ntype Props = {\n    onClick: () => void,\n    children: any,\n}\n\nexport function Button(props: Props) {\n    const [pressed, setPressed] = useState(false);\n    const onClick = () => {\n        setPressed(true);\n        props.onClick();\n    }\n    return (\n        <div className={classNames('button', {'pressed': pressed})} onClick={onClick}>{props.children}</div>\n    )\n}","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../ui/button/button\";\nimport './startPage.css';\n\nexport const StartPage : React.FC = () => {\n    const history = useHistory();\n\n    const onNextStep = () => {\n        history.push('./game')\n    }\n\n    return(\n        <div className='start'>\n            <div className='start-bottom'/>\n            <div className='start__content max-width'>\n                <div className='start__left'>\n                    <img src='./hand1.png' alt='hand'/>\n                </div>\n                <div className='start__right'>\n                    <div className='headline'>\n                        Who wants to be a millionaire?\n                    </div>\n                    <Button onClick={onNextStep}>Start</Button>\n                </div>\n            </div>\n        </div>\n    )\n}","import { connect } from 'react-redux';\nimport  { GameOverPage }  from './gameOverPage';\n\nconst mapStateToProps = (state: number) => {\n  return {\n    round: state\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    restartGame: () => dispatch({ type: 'Reset' }),\n  }\n};\nexport const ContainerOver = connect(mapStateToProps, mapDispatchToProps)(GameOverPage);","import React, {useCallback} from \"react\";\nimport { Button } from \"../ui/button/button\";\nimport config from '../../config.json'\nimport { useHistory } from \"react-router-dom\";\n\ntype Props = {\n    round: number;\n    restartGame: () => void;\n}\n\nexport const GameOverPage: React.FC<Props> = ({round, restartGame}) => {\n    const onRestartGame = useCallback(() => {\n        restartGame();\n    }, [restartGame]);\n    const prize = round > 1 ? config.prizes[round - 2] : '$0'\n\n    const history = useHistory();\n\n    const onClick = () => {\n        onRestartGame();\n        history.push('/');\n    }\n    console.log(round, config.prizes, round - 2, config.prizes[round - 2])\n\n    return(\n        <div className='start'>\n            <div className='start__content max-width'>\n                <div className='start__left'>\n                    <img src='./hand1.png' alt='hand'/>\n                </div>\n                <div className='start__right'>\n                    <div className='question'>\n                        Total score:\n                    </div>\n                    <div className='headline'>\n                        {prize} earned\n                    </div>\n                    <Button onClick={onClick}>Try Again</Button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport './prizesItem.css'\n\ntype Props = {\n    currentQuestion: number;\n    children: string;\n    index: number;\n}\n\nexport const PrizesItem:  React.FC<Props> = ({ currentQuestion, children, index}) => {\n    return (\n    <div className={ classNames(\n            'prizes__item-wrapper', \n            {'-current': currentQuestion === index},\n            {'-done': currentQuestion > index},\n            {'-coming': currentQuestion < index}\n    )}>\n        <div className='prizes__item option'>{children}</div>\n    </div>\n    )\n}","import React from \"react\";\nimport config from '../../../config.json'\nimport { PrizesItem } from \"./prizesItem/prizesItem\";\n\nimport './prizes.css'\n\ntype Props = {\n    currentQuestion: number;\n}\n\nexport const Prizes : React.FC<Props> = ({ currentQuestion }) => {\n    const  prizes  = [...config.prizes].reverse();\n    return (\n        <div className='prizes'>\n            {prizes.map((item, index)=> \n                <PrizesItem currentQuestion={currentQuestion} index={prizes.length - index} key={item}>{item}</PrizesItem>\n            )}\n        </div>\n    )\n}","import React, { useCallback } from \"react\";\nimport classNames from \"classnames\";\n\nimport './option.css';\nimport { OptionType } from \"../question/question\";\n\ntype Props = {\n    option: OptionType;\n    onClick: (id: string)=>void;\n    selected: string | null;\n    status: string;\n}\n\nexport const Option: React.FC<Props> = ({option, onClick, selected, status}) => {\n    const handleOnClick = useCallback(() => {\n        if (selected !== null) {\n            return\n        }\n        onClick(option.id);\n    }, [onClick, option, selected])\n\n    return (\n        <div className={classNames('option-wrapper', selected === option.id ? status : 'inactive')}>\n            <div className='option' onClick={handleOnClick}><span>{option.leter}</span>{option.option}</div>\n        </div>\n    \n    )\n}","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Option } from '../option/option'\nimport config from '../../../config.json'\n\nimport './question.css'\n\nexport type OptionType = {\n    id: string;\n    leter: string;\n    option: string;\n}\n\ntype Props = {\n    question: {\n        id: string;\n        question: string;\n        options: OptionType[];\n    } | undefined,\n    onAnswer: (result: boolean) => void;\n}\n\nexport const Question : React.FC<Props> = ({question, onAnswer}) => {\n    const [selected, setSelected] = useState<string | null>(null);\n    const [status, setStatus] = useState('-inactive');\n\n    const handleOnAnswer = useCallback((arg) => {\n        onAnswer(arg);\n    }, [onAnswer]);\n\n    useEffect(() => {\n        if (selected === null) {\n            return;\n        }\n        \n        let timer: any;\n        let secondTimer: any;\n        if (status === 'selected') {\n            timer = setTimeout(() => {\n                const answer = config.answers.find(item => item.id === question?.id);\n                        if (answer?.answer.includes(selected)) {\n                            setStatus('correct')\n                        } else {\n                            setStatus('wrong')\n                        }\n            }, 1000);\n        }\n\n        if (status === 'correct' || status === 'wrong') {\n            secondTimer = setTimeout(()=>{\n                handleOnAnswer(status==='correct');\n                setSelected(null);\n                setStatus('inactive');\n            },2000);\n        }\n        return () => {\n            clearTimeout(timer)\n            clearTimeout(secondTimer)\n        };\n      }, [selected, status, handleOnAnswer, question]);\n\n    const onClick = (id: string) => {\n        setSelected(id);\n        setStatus('selected');\n    };\n\n    return(\n        <div className='question-field'>\n            <div className='question-field__question question'>{question!.question}</div>\n            <div className='question-field__options'>\n                {question!.options.map(option=>(<Option option={option} onClick={onClick} selected={selected} status={status} key={option.id}/>))}\n            </div>\n        </div>\n    )\n}","import { connect } from 'react-redux';\nimport  { GamePage }  from './gamePage';\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onNextRound: () => dispatch({ type: 'Add' }),\n  }\n};\n\nconst mapStateToProps = (state: number) => {\n    return {\n      round: state\n    };\n  };\n\nexport const ContainerGame = connect(mapStateToProps, mapDispatchToProps)(GamePage);","import React, { useState, useCallback } from \"react\";\nimport config from '../../config.json';\nimport { Prizes } from \"./prizes/prizes\";\nimport { Question } from \"./question/question\";\nimport classNames from \"classnames\";\nimport { useHistory } from \"react-router-dom\";\n\nimport './gamePage.css'\n\ntype Props = {\n    onNextRound : () => void,\n    round: number\n}\n\nexport const GamePage: React.FC<Props> = ({round, onNextRound}) => {\n    const history = useHistory();\n    \n    const handleOnNextRound = useCallback(() => {\n        onNextRound();\n    }, [onNextRound]);\n\n    const [showQuestion, setShowQuestion] = useState(true);\n\n    const handleBurger = () => {\n        setShowQuestion(!showQuestion)\n    }\n\n    const onAnswer = (result: boolean) => {\n        if (result) {\n            handleOnNextRound();\n            console.log(round)\n            if (round >= config.questions.length) {\n                history.push('/over');\n            }\n        } else {\n            history.push('/over');\n        }\n    }\n    \n    return (\n        <div className={classNames('game', 'max-width', {'show-question': showQuestion}, {'show-prizes': !showQuestion})}>\n            <div className='burger' onClick={handleBurger}>\n                {showQuestion ? <img src='./burger.svg' alt='burger' /> : <img src='./cross.svg' alt='cross' />}\n            </div>\n            <Question question={config.questions.find(question=>question.id === round.toString()) || config.questions[config.questions.length - 1]} onAnswer={onAnswer}/>\n            <Prizes currentQuestion={round}/>\n        </div>\n    )\n}","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { StartPage } from \"./components/startPage/startPage\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { ContainerOver } from \"./components/gameOverPage/containerOver\";\nimport { ContainerGame } from \"./components/gamePage/containerGame\";\n\ntype Action = {\n  type: string;\n}\n\nconst earnCounting = function (state = 1, action: Action) {\n  switch (action.type) {\n    case \"Add\": \n      return state + 1\n    case \"Reset\": \n      return 1\n    default:\n      return state;\n  }\n};\n\nlet store = createStore(earnCounting);\n\nexport default function App() {\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\">\n              <StartPage />\n            </Route>\n            <Route path=\"/game\">\n              <ContainerGame/>\n            </Route>\n            <Route path=\"/over\">\n              <ContainerOver />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}